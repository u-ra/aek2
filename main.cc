/*
	Copyright (C) 2011  Andrew Cotter

	This program is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the Free
	Software Foundation, either version 3 of the License, or (at your option)
	any later version.

	This program is distributed in the hope that it will be useful, but WITHOUT
	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
	more details.

	You should have received a copy of the GNU General Public License along
	with this program. If not, see <http://www.gnu.org/licenses/>.
*/


/**
	\file main.cc
	\brief Main function definition
*/


/**
	\mainpage

	\section sec_links Links

	<ul>

	<li>HID information: http://www.usb.org/developers/hidpage</li>

	<li>Rollover test:
	http://www.microsoft.com/appliedsciences/content/projects/MultiKeyDisplay.aspx</li>

	</ul>

	\section sec_copyright Copyright notice

	Thie program is licensed under the GPL V3:

<pre>	Copyright (C) 2011  Andrew Cotter

	This program is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the Free
	Software Foundation, either version 3 of the License, or (at your option)
	any later version.

	This program is distributed in the hope that it will be useful, but WITHOUT
	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
	more details.

	You should have received a copy of the GNU General Public License along
	with this program. If not, see <http://www.gnu.org/licenses/>.</pre>

	Some of the USB code was derived from <a
	href="http://www.pjrc.com">PJRC</a>'s Teensy example programs, in
	particular <a
	href="http://www.pjrc.com/teensy/usb_serial.html">usb_serial</a>, <a
	href="http://www.pjrc.com/teensy/usb_keyboard.html">usb_keyboard</a> and
	<a href="http://www.pjrc.com/teensy/usb_mouse.html">usb_mouse</a>, which
	I received under the following license:

<pre>	Copyright (c) 2008 PJRC.COM, LLC

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"),
	to deal in the Software without restriction, including without limitation
	the rights to use, copy, modify, merge, publish, distribute, sublicense,
	and/or sell copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.</pre>
*/




#include "keymap.hh"
#include "usb.hh"
#include "keyboard_matrix.hh"
#include "buttons.hh"
#include "adb.hh"
#include "timer.hh"
#include "helpers.h"

#include <math.h>

#include <avr/io.h>
#include <avr/pgmspace.h>
#include <util/delay.h>




//============================================================================
//    global #defines
//============================================================================


#define BUTTONS 10

#define ROWS    8
#define COLUMNS 16




//============================================================================
//    global variables
//============================================================================


uint16_t const g_vendorID      = 0xdead;
uint16_t const g_productID     = 0xbeef;
uint16_t const g_releaseNumber = 0x0100;

extern wchar_t const g_manufacturerString[] __attribute__(( __progmem__ ));
wchar_t const g_manufacturerString[] = L"Me";

extern wchar_t const g_productString[] __attribute__(( __progmem__ ));
wchar_t const g_productString[] = L"Apple Extended Keyboard II";

extern wchar_t const g_mouseString[] __attribute__(( __progmem__ ));
wchar_t const g_mouseString[] = L"Boot Mouse Interface";

extern wchar_t const g_keyboardString[] __attribute__(( __progmem__ ));
wchar_t const g_keyboardString[] = L"Boot Keyboard Interface";

extern wchar_t const g_keyboardExtensionString[] __attribute__(( __progmem__ ));
wchar_t const g_keyboardExtensionString[] = L"Keyboard Extension Interface";




//============================================================================
//    Buttons keymap
//============================================================================


extern uint8_t const g_buttonsKeymap[ BUTTONS ] __attribute__(( __progmem__ ));
uint8_t const g_buttonsKeymap[ BUTTONS ] = {
	KEYMAP_KEYBOARD_POWER,
	KEYMAP_KEYBOARD_LEFT_GUI,
	KEYMAP_KEYBOARD_RIGHT_ALT,
	KEYMAP_KEYBOARD_CAPS_LOCK,
	KEYMAP_KEYBOARD_RIGHT_SHIFT,
	KEYMAP_KEYBOARD_RIGHT_CONTROL,
	KEYMAP_KEYBOARD_LEFT_CONTROL,
	KEYMAP_KEYBOARD_LEFT_SHIFT,
	KEYMAP_KEYBOARD_LEFT_ALT,
	KEYMAP_KEYBOARD_RIGHT_GUI
};




//============================================================================
//    Keyboard matrix keymap
//============================================================================


extern uint8_t const g_matrixKeymap[ ROWS * COLUMNS ] __attribute__(( __progmem__ ));
uint8_t const g_matrixKeymap[ ROWS * COLUMNS ] = {
	KEYMAP_KEYBOARD_KEYPAD_9,     KEYMAP_KEYBOARD_NUM_LOCK,      KEYMAP_NONE,                 KEYMAP_KEYBOARD_F14,        KEYMAP_KEYBOARD_F13,       KEYMAP_KEYBOARD_F12,       KEYMAP_KEYBOARD_F10,           KEYMAP_KEYBOARD_F9,        KEYMAP_KEYBOARD_F7, KEYMAP_KEYBOARD_F6, KEYMAP_KEYBOARD_F5,       KEYMAP_KEYBOARD_F4, KEYMAP_KEYBOARD_F3, KEYMAP_KEYBOARD_F2, KEYMAP_KEYBOARD_F1, KEYMAP_KEYBOARD_ESCAPE,
	KEYMAP_KEYBOARD_KEYPAD_SLASH, KEYMAP_KEYBOARD_KEYPAD_EQUALS, KEYMAP_KEYBOARD_KEYPAD_8,    KEYMAP_KEYBOARD_F15,        KEYMAP_KEYBOARD_PAGE_UP,   KEYMAP_KEYBOARD_BACKSPACE, KEYMAP_KEYBOARD_F11,           KEYMAP_KEYBOARD_0,         KEYMAP_KEYBOARD_F8, KEYMAP_KEYBOARD_7,  KEYMAP_KEYBOARD_6,        KEYMAP_KEYBOARD_4,  KEYMAP_KEYBOARD_3,  KEYMAP_KEYBOARD_2,  KEYMAP_KEYBOARD_1,  KEYMAP_KEYBOARD_NON_US_BACKSLASH,
	KEYMAP_KEYBOARD_KEYPAD_STAR,  KEYMAP_NONE,                   KEYMAP_KEYBOARD_KEYPAD_7,    KEYMAP_NONE,                KEYMAP_KEYBOARD_PAGE_DOWN, KEYMAP_KEYBOARD_BACKSLASH, KEYMAP_KEYBOARD_EQUALS,        KEYMAP_KEYBOARD_O,         KEYMAP_KEYBOARD_9,  KEYMAP_KEYBOARD_8,  KEYMAP_KEYBOARD_T,        KEYMAP_KEYBOARD_5,  KEYMAP_NONE,        KEYMAP_NONE,        KEYMAP_NONE,        KEYMAP_NONE,
	KEYMAP_KEYBOARD_KEYPAD_DASH,  KEYMAP_NONE,                   KEYMAP_KEYBOARD_KEYPAD_6,    KEYMAP_NONE,                KEYMAP_KEYBOARD_END,       KEYMAP_KEYBOARD_HOME,      KEYMAP_KEYBOARD_LEFT_BRACKET,  KEYMAP_KEYBOARD_DASH,      KEYMAP_NONE,        KEYMAP_NONE,        KEYMAP_KEYBOARD_Y,        KEYMAP_KEYBOARD_G,  KEYMAP_NONE,        KEYMAP_NONE,        KEYMAP_NONE,        KEYMAP_NONE,
	KEYMAP_KEYBOARD_KEYPAD_3,     KEYMAP_KEYBOARD_RIGHT_ARROW,   KEYMAP_KEYBOARD_KEYPAD_5,    KEYMAP_NONE,                KEYMAP_KEYBOARD_DELETE,    KEYMAP_KEYBOARD_INSERT,    KEYMAP_KEYBOARD_RIGHT_BRACKET, KEYMAP_KEYBOARD_P,         KEYMAP_KEYBOARD_K,  KEYMAP_KEYBOARD_I,  KEYMAP_NONE,              KEYMAP_KEYBOARD_R,  KEYMAP_KEYBOARD_E,  KEYMAP_KEYBOARD_W,  KEYMAP_KEYBOARD_Q,  KEYMAP_KEYBOARD_TAB,
	KEYMAP_KEYBOARD_KEYPAD_ENTER, KEYMAP_NONE,                   KEYMAP_KEYBOARD_KEYPAD_4,    KEYMAP_NONE,                KEYMAP_KEYBOARD_UP_ARROW,  KEYMAP_KEYBOARD_ENTER,     KEYMAP_KEYBOARD_QUOTE,         KEYMAP_KEYBOARD_SEMICOLON, KEYMAP_KEYBOARD_L,  KEYMAP_NONE,        KEYMAP_KEYBOARD_U,        KEYMAP_NONE,        KEYMAP_KEYBOARD_D,  KEYMAP_NONE,        KEYMAP_NONE,        KEYMAP_NONE,
	KEYMAP_NONE,                  KEYMAP_NONE,                   KEYMAP_KEYBOARD_KEYPAD_PLUS, KEYMAP_KEYBOARD_LEFT_ARROW, KEYMAP_NONE,               KEYMAP_KEYBOARD_PERIOD,    KEYMAP_KEYBOARD_SLASH,         KEYMAP_KEYBOARD_COMMA,     KEYMAP_KEYBOARD_J,  KEYMAP_KEYBOARD_H,  KEYMAP_KEYBOARD_B,        KEYMAP_KEYBOARD_F,  KEYMAP_NONE,        KEYMAP_NONE,        KEYMAP_KEYBOARD_S,  KEYMAP_KEYBOARD_A,
	KEYMAP_NONE,                  KEYMAP_KEYBOARD_KEYPAD_PERIOD, KEYMAP_NONE,                 KEYMAP_KEYBOARD_DOWN_ARROW, KEYMAP_KEYBOARD_KEYPAD_2,  KEYMAP_KEYBOARD_KEYPAD_1,  KEYMAP_KEYBOARD_KEYPAD_0,      KEYMAP_KEYBOARD_M,         KEYMAP_KEYBOARD_N,  KEYMAP_NONE,        KEYMAP_KEYBOARD_SPACEBAR, KEYMAP_KEYBOARD_V,  KEYMAP_KEYBOARD_C,  KEYMAP_KEYBOARD_X,  KEYMAP_KEYBOARD_Z,  KEYMAP_NONE
};




//============================================================================
//    ADB keymap
//============================================================================


extern uint8_t const g_adbKeymap[ 128 ] __attribute__(( __progmem__ ));
uint8_t const g_adbKeymap[ 128 ] = {
	KEYMAP_KEYBOARD_A,    KEYMAP_KEYBOARD_S,             KEYMAP_KEYBOARD_D,         KEYMAP_KEYBOARD_F,           KEYMAP_KEYBOARD_H,        KEYMAP_KEYBOARD_G,           KEYMAP_KEYBOARD_Z,            KEYMAP_KEYBOARD_X,        KEYMAP_KEYBOARD_C,          KEYMAP_KEYBOARD_V,                KEYMAP_NONE,               KEYMAP_KEYBOARD_B,            KEYMAP_KEYBOARD_Q,            KEYMAP_KEYBOARD_W,             KEYMAP_KEYBOARD_E,             KEYMAP_KEYBOARD_R,
	KEYMAP_KEYBOARD_Y,    KEYMAP_KEYBOARD_T,             KEYMAP_KEYBOARD_1,         KEYMAP_KEYBOARD_2,           KEYMAP_KEYBOARD_3,        KEYMAP_KEYBOARD_4,           KEYMAP_KEYBOARD_6,            KEYMAP_KEYBOARD_5,        KEYMAP_KEYBOARD_EQUALS,     KEYMAP_KEYBOARD_9,                KEYMAP_KEYBOARD_7,         KEYMAP_KEYBOARD_DASH,         KEYMAP_KEYBOARD_8,            KEYMAP_KEYBOARD_0,             KEYMAP_KEYBOARD_RIGHT_BRACKET, KEYMAP_KEYBOARD_O,
	KEYMAP_KEYBOARD_U,    KEYMAP_KEYBOARD_LEFT_BRACKET,  KEYMAP_KEYBOARD_I,         KEYMAP_KEYBOARD_P,           KEYMAP_KEYBOARD_ENTER,    KEYMAP_KEYBOARD_L,           KEYMAP_KEYBOARD_J,            KEYMAP_KEYBOARD_QUOTE,    KEYMAP_KEYBOARD_K,          KEYMAP_KEYBOARD_SEMICOLON,        KEYMAP_KEYBOARD_BACKSLASH, KEYMAP_KEYBOARD_COMMA,        KEYMAP_KEYBOARD_SLASH,        KEYMAP_KEYBOARD_N,             KEYMAP_KEYBOARD_M,             KEYMAP_KEYBOARD_PERIOD,
	KEYMAP_KEYBOARD_TAB,  KEYMAP_KEYBOARD_SPACEBAR,      KEYMAP_KEYBOARD_BACKQUOTE, KEYMAP_KEYBOARD_BACKSPACE,   KEYMAP_NONE,              KEYMAP_KEYBOARD_ESCAPE,      KEYMAP_KEYBOARD_LEFT_CONTROL, KEYMAP_KEYBOARD_LEFT_GUI, KEYMAP_KEYBOARD_LEFT_SHIFT, KEYMAP_VIRTUAL_LOCKING_CAPS_LOCK, KEYMAP_KEYBOARD_LEFT_ALT,  KEYMAP_KEYBOARD_LEFT_ARROW,   KEYMAP_KEYBOARD_RIGHT_ARROW,  KEYMAP_KEYBOARD_DOWN_ARROW,    KEYMAP_KEYBOARD_UP_ARROW,      KEYMAP_NONE,         
	KEYMAP_NONE,          KEYMAP_KEYBOARD_KEYPAD_PERIOD, KEYMAP_NONE,               KEYMAP_KEYBOARD_KEYPAD_STAR, KEYMAP_NONE,              KEYMAP_KEYBOARD_KEYPAD_PLUS, KEYMAP_NONE,                  KEYMAP_KEYBOARD_NUM_LOCK, KEYMAP_NONE,                KEYMAP_NONE,                      KEYMAP_NONE,               KEYMAP_KEYBOARD_KEYPAD_SLASH, KEYMAP_KEYBOARD_KEYPAD_ENTER, KEYMAP_NONE,                   KEYMAP_KEYBOARD_KEYPAD_DASH,   KEYMAP_NONE,         
	KEYMAP_NONE,          KEYMAP_KEYBOARD_KEYPAD_EQUALS, KEYMAP_KEYBOARD_KEYPAD_0,  KEYMAP_KEYBOARD_KEYPAD_1,    KEYMAP_KEYBOARD_KEYPAD_2, KEYMAP_KEYBOARD_KEYPAD_3,    KEYMAP_KEYBOARD_KEYPAD_4,     KEYMAP_KEYBOARD_KEYPAD_5, KEYMAP_KEYBOARD_KEYPAD_6,   KEYMAP_KEYBOARD_KEYPAD_7,         KEYMAP_NONE,               KEYMAP_KEYBOARD_KEYPAD_8,     KEYMAP_KEYBOARD_KEYPAD_9,     KEYMAP_NONE,                   KEYMAP_NONE,                   KEYMAP_NONE,         
	KEYMAP_KEYBOARD_F5,   KEYMAP_KEYBOARD_F6,            KEYMAP_KEYBOARD_F7,        KEYMAP_KEYBOARD_F3,          KEYMAP_KEYBOARD_F8,       KEYMAP_KEYBOARD_F9,          KEYMAP_NONE,                  KEYMAP_KEYBOARD_F11,      KEYMAP_NONE,                KEYMAP_KEYBOARD_PRINT_SCREEN,     KEYMAP_NONE,               KEYMAP_KEYBOARD_SCROLL_LOCK,  KEYMAP_NONE,                  KEYMAP_KEYBOARD_F10,           KEYMAP_NONE,                   KEYMAP_KEYBOARD_F12,
	KEYMAP_NONE,          KEYMAP_KEYBOARD_PAUSE,         KEYMAP_KEYBOARD_INSERT,    KEYMAP_KEYBOARD_HOME,        KEYMAP_KEYBOARD_PAGE_UP,  KEYMAP_KEYBOARD_DELETE,      KEYMAP_KEYBOARD_F4,           KEYMAP_KEYBOARD_END,      KEYMAP_KEYBOARD_F2,         KEYMAP_KEYBOARD_PAGE_DOWN,        KEYMAP_KEYBOARD_F1,        KEYMAP_KEYBOARD_RIGHT_SHIFT,  KEYMAP_KEYBOARD_RIGHT_ALT,    KEYMAP_KEYBOARD_RIGHT_CONTROL, KEYMAP_NONE,                   KEYMAP_KEYBOARD_POWER
};




//============================================================================
//    Extended keymap
//============================================================================


enum {

	KEYMAP_KEYBOARD_KEYPAD_CLEAR = KEYMAP_BASE_END,

	KEYMAP_CONSUMER_PLAY,
	KEYMAP_CONSUMER_PAUSE,
	KEYMAP_CONSUMER_RECORD,
	KEYMAP_CONSUMER_FAST_FORWARD,
	KEYMAP_CONSUMER_REWIND,
	KEYMAP_CONSUMER_SCAN_NEXT_TRACK,
	KEYMAP_CONSUMER_SCAN_PREVIOUS_TRACK,
	KEYMAP_CONSUMER_STOP,
	KEYMAP_CONSUMER_EJECT,

	KEYMAP_CONSUMER_STOP_EJECT,
	KEYMAP_CONSUMER_PLAY_PAUSE,
	KEYMAP_CONSUMER_PLAY_SKIP,

	KEYMAP_CONSUMER_MUTE,
	KEYMAP_CONSUMER_VOLUME_INCREMENT,
	KEYMAP_CONSUMER_VOLUME_DECREMENT,

	KEYMAP_CONSUMER_AL_LAUNCH_BUTTON_CONFIGURATION_TOOL,
	KEYMAP_CONSUMER_AL_PROGRAMMABLE_BUTTON_CONFIGURATION,
	KEYMAP_CONSUMER_AL_CONSUMER_CONTROL_CONFIGURATION,
	KEYMAP_CONSUMER_AL_WORD_PROCESSOR,
	KEYMAP_CONSUMER_AL_TEXT_EDITOR,
	KEYMAP_CONSUMER_AL_SPREADSHEET,
	KEYMAP_CONSUMER_AL_GRAPHICS_EDITOR,
	KEYMAP_CONSUMER_AL_PRESENTATION_APP,
	KEYMAP_CONSUMER_AL_DATABASE_APP,
	KEYMAP_CONSUMER_AL_EMAIL_READER,
	KEYMAP_CONSUMER_AL_NEWSREADER,
	KEYMAP_CONSUMER_AL_VOICEMAIL,
	KEYMAP_CONSUMER_AL_CONTACTS_OR_ADDRESS_BOOK,
	KEYMAP_CONSUMER_AL_CALENDAR_OR_SCHEDULE,
	KEYMAP_CONSUMER_AL_TASK_OR_PROJECT_MANAGER,
	KEYMAP_CONSUMER_AL_LOG_OR_JOURNAL_OR_TIMECARD,
	KEYMAP_CONSUMER_AL_CHECKBOOK_OR_FINANCE,
	KEYMAP_CONSUMER_AL_CALCULATOR,
	KEYMAP_CONSUMER_AL_A_V_CAPTURE_OR_PLAYBACK,
	KEYMAP_CONSUMER_AL_LOCAL_MACHINE_BROWSER,
	KEYMAP_CONSUMER_AL_LAN_OR_WAN_BROWSER,
	KEYMAP_CONSUMER_AL_INTERNET_BROWSER,
	KEYMAP_CONSUMER_AL_REMOTE_NETWORKING_OR_ISP_CONNECT,
	KEYMAP_CONSUMER_AL_NETWORK_CONFERENCE,
	KEYMAP_CONSUMER_AL_NETWORK_CHAT,
	KEYMAP_CONSUMER_AL_TELEPHONY_OR_DIALER,
	KEYMAP_CONSUMER_AL_LOGON,
	KEYMAP_CONSUMER_AL_LOGOFF,
	KEYMAP_CONSUMER_AL_LOGON_LOGOFF,
	KEYMAP_CONSUMER_AL_TERMINAL_LOCK_OR_SCREENSAVER,
	KEYMAP_CONSUMER_AL_CONTROL_PANEL,
	KEYMAP_CONSUMER_AL_COMMAND_LINE_PROCESSOR_OR_RUN,
	KEYMAP_CONSUMER_AL_PROCESS_OR_TASK_MANAGER,
	KEYMAP_CONSUMER_AL_SELECT_TASK_OR_APPLICATION,
	KEYMAP_CONSUMER_AL_NEXT_TASK_OR_APPLICATION,
	KEYMAP_CONSUMER_AL_PREVIOUS_TASK_OR_APPLICATION,
	KEYMAP_CONSUMER_AL_PREEMPTIVE_HALT_TASK_OR_APPLICATION,
	KEYMAP_CONSUMER_AL_INTEGRATED_HELP_CENTER,
	KEYMAP_CONSUMER_AL_DOCUMENTS,
	KEYMAP_CONSUMER_AL_THESAURUS,
	KEYMAP_CONSUMER_AL_DICTIONARY,
	KEYMAP_CONSUMER_AL_DESKTOP,
	KEYMAP_CONSUMER_AL_SPELL_CHECK,
	KEYMAP_CONSUMER_AL_GRAMMAR_CHECK,
	KEYMAP_CONSUMER_AL_WIRELESS_STATUS,
	KEYMAP_CONSUMER_AL_KEYBOARD_LAYOUT,
	KEYMAP_CONSUMER_AL_VIRUS_PROTECTION,
	KEYMAP_CONSUMER_AL_ENCRYPTION,
	KEYMAP_CONSUMER_AL_SCREEN_SAVER,
	KEYMAP_CONSUMER_AL_ALARMS,
	KEYMAP_CONSUMER_AL_CLOCK,
	KEYMAP_CONSUMER_AL_FILE_BROWSER,
	KEYMAP_CONSUMER_AL_POWER_STATUS,
	KEYMAP_CONSUMER_AL_IMAGE_BROWSER,
	KEYMAP_CONSUMER_AL_AUDIO_BROWSER,
	KEYMAP_CONSUMER_AL_MOVIE_BROWSER,
	KEYMAP_CONSUMER_AL_DIGITAL_RIGHTS_MANAGER,
	KEYMAP_CONSUMER_AL_DIGITAL_WALLET,
	KEYMAP_CONSUMER_AL_INSTANT_MESSAGING,
	KEYMAP_CONSUMER_AL_OEM_FEATURES_OR_TIPS_OR_TUTORIAL_BROWSER,
	KEYMAP_CONSUMER_AL_OEM_HELP,
	KEYMAP_CONSUMER_AL_ONLINE_COMMUNITY,
	KEYMAP_CONSUMER_AL_ENTERTAINMENT_CONTENT_BROWSER,
	KEYMAP_CONSUMER_AL_ONLINE_SHOPPING_BROWSER,
	KEYMAP_CONSUMER_AL_SMARTCARD_INFORMATION_OR_HELP,
	KEYMAP_CONSUMER_AL_MARKET_MONITOR_OR_FINANCE_BROWSER,
	KEYMAP_CONSUMER_AL_CUSTOMIZED_CORPORATE_NEWS_BROWSER,
	KEYMAP_CONSUMER_AL_ONLINE_ACTIVITY_BROWSER,
	KEYMAP_CONSUMER_AL_RESEARCH_OR_SEARCH_BROWSER,
	KEYMAP_CONSUMER_AL_AUDIO_PLAYER,

	KEYMAP_CONSUMER_AC_PAN_LEFT,
	KEYMAP_CONSUMER_AC_PAN_RIGHT,

	KEYMAP_VIRTUAL_LAYER_0_SELECT,
	KEYMAP_VIRTUAL_LAYER_1_SELECT,
	KEYMAP_VIRTUAL_LAYER_2_SELECT,
	KEYMAP_VIRTUAL_LAYER_3_SELECT,
	KEYMAP_VIRTUAL_LAYER_4_SELECT,

	KEYMAP_VIRTUAL_LAYER_0_LOCK,
	KEYMAP_VIRTUAL_LAYER_1_LOCK,
	KEYMAP_VIRTUAL_LAYER_2_LOCK,
	KEYMAP_VIRTUAL_LAYER_3_LOCK,
	KEYMAP_VIRTUAL_LAYER_4_LOCK,

	KEYMAP_VIRTUAL_STICKY_LEFT_CONTROL,
	KEYMAP_VIRTUAL_STICKY_LEFT_SHIFT,
	KEYMAP_VIRTUAL_STICKY_LEFT_ALT,
	KEYMAP_VIRTUAL_STICKY_LEFT_GUI,
	KEYMAP_VIRTUAL_STICKY_RIGHT_CONTROL,
	KEYMAP_VIRTUAL_STICKY_RIGHT_SHIFT,
	KEYMAP_VIRTUAL_STICKY_RIGHT_ALT,
	KEYMAP_VIRTUAL_STICKY_RIGHT_GUI,

	KEYMAP_VIRTUAL_MOUSE_N,
	KEYMAP_VIRTUAL_MOUSE_NE,
	KEYMAP_VIRTUAL_MOUSE_E,
	KEYMAP_VIRTUAL_MOUSE_SE,
	KEYMAP_VIRTUAL_MOUSE_S,
	KEYMAP_VIRTUAL_MOUSE_SW,
	KEYMAP_VIRTUAL_MOUSE_W,
	KEYMAP_VIRTUAL_MOUSE_NW,
	KEYMAP_VIRTUAL_MOUSE_WHEEL_UP,
	KEYMAP_VIRTUAL_MOUSE_WHEEL_DOWN,
	KEYMAP_VIRTUAL_MOUSE_BUTTON_1_PRESS,
	KEYMAP_VIRTUAL_MOUSE_BUTTON_2_PRESS,
	KEYMAP_VIRTUAL_MOUSE_BUTTON_3_PRESS,
	KEYMAP_VIRTUAL_MOUSE_BUTTON_1_TOGGLE,
	KEYMAP_VIRTUAL_MOUSE_BUTTON_2_TOGGLE,
	KEYMAP_VIRTUAL_MOUSE_BUTTON_3_TOGGLE

};


extern uint16_t const g_extendedKeymap[] __attribute__(( __progmem__ ));
uint16_t const g_extendedKeymap[] = {

	KEYCODE_KEYBOARD( USB::HID::KEY_KEYPAD_CLEAR ),

	KEYCODE_CONSUMER( USB::HID::CONSUMER_PLAY ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_PAUSE ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_RECORD ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_FAST_FORWARD ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_REWIND ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_SCAN_NEXT_TRACK ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_SCAN_PREVIOUS_TRACK ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_STOP ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_EJECT ),

	KEYCODE_CONSUMER( USB::HID::CONSUMER_STOP_EJECT ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_PLAY_PAUSE ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_PLAY_SKIP ),

	KEYCODE_CONSUMER( USB::HID::CONSUMER_MUTE ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_VOLUME_INCREMENT ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_VOLUME_DECREMENT ),

	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_LAUNCH_BUTTON_CONFIGURATION_TOOL ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_PROGRAMMABLE_BUTTON_CONFIGURATION ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_CONSUMER_CONTROL_CONFIGURATION ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_WORD_PROCESSOR ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_TEXT_EDITOR ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_SPREADSHEET ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_GRAPHICS_EDITOR ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_PRESENTATION_APP ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_DATABASE_APP ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_EMAIL_READER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_NEWSREADER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_VOICEMAIL ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_CONTACTS_OR_ADDRESS_BOOK ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_CALENDAR_OR_SCHEDULE ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_TASK_OR_PROJECT_MANAGER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_LOG_OR_JOURNAL_OR_TIMECARD ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_CHECKBOOK_OR_FINANCE ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_CALCULATOR ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_A_V_CAPTURE_OR_PLAYBACK ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_LOCAL_MACHINE_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_LAN_OR_WAN_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_INTERNET_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_REMOTE_NETWORKING_OR_ISP_CONNECT ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_NETWORK_CONFERENCE ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_NETWORK_CHAT ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_TELEPHONY_OR_DIALER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_LOGON ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_LOGOFF ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_LOGON_LOGOFF ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_TERMINAL_LOCK_OR_SCREENSAVER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_CONTROL_PANEL ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_COMMAND_LINE_PROCESSOR_OR_RUN ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_PROCESS_OR_TASK_MANAGER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_SELECT_TASK_OR_APPLICATION ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_NEXT_TASK_OR_APPLICATION ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_PREVIOUS_TASK_OR_APPLICATION ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_PREEMPTIVE_HALT_TASK_OR_APPLICATION ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_INTEGRATED_HELP_CENTER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_DOCUMENTS ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_THESAURUS ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_DICTIONARY ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_DESKTOP ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_SPELL_CHECK ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_GRAMMAR_CHECK ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_WIRELESS_STATUS ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_KEYBOARD_LAYOUT ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_VIRUS_PROTECTION ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_ENCRYPTION ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_SCREEN_SAVER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_ALARMS ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_CLOCK ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_FILE_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_POWER_STATUS ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_IMAGE_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_AUDIO_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_MOVIE_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_DIGITAL_RIGHTS_MANAGER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_DIGITAL_WALLET ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_INSTANT_MESSAGING ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_OEM_FEATURES_OR_TIPS_OR_TUTORIAL_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_OEM_HELP ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_ONLINE_COMMUNITY ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_ENTERTAINMENT_CONTENT_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_ONLINE_SHOPPING_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_SMARTCARD_INFORMATION_OR_HELP ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_MARKET_MONITOR_OR_FINANCE_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_CUSTOMIZED_CORPORATE_NEWS_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_ONLINE_ACTIVITY_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_RESEARCH_OR_SEARCH_BROWSER ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AL_AUDIO_PLAYER ),

	KEYCODE_CONSUMER( USB::HID::CONSUMER_AC_PAN_LEFT ),
	KEYCODE_CONSUMER( USB::HID::CONSUMER_AC_PAN_RIGHT ),

	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_SELECT + 0 ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_SELECT + 1 ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_SELECT + 2 ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_SELECT + 3 ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_SELECT + 4 ),

	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_LOCK + 0 ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_LOCK + 1 ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_LOCK + 2 ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_LOCK + 3 ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_LAYER_LOCK + 4 ),

	KEYCODE_VIRTUAL( Keymap::VIRTUAL_STICKY_LEFT_CONTROL ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_STICKY_LEFT_SHIFT ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_STICKY_LEFT_ALT ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_STICKY_LEFT_GUI ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_STICKY_RIGHT_CONTROL ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_STICKY_RIGHT_SHIFT ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_STICKY_RIGHT_ALT ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_STICKY_RIGHT_GUI ),

	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_N ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_NE ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_E ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_SE ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_S ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_SW ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_W ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_NW ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_WHEEL_UP ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_WHEEL_DOWN ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_BUTTON_1_PRESS ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_BUTTON_2_PRESS ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_BUTTON_3_PRESS ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_BUTTON_1_TOGGLE ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_BUTTON_2_TOGGLE ),
	KEYCODE_VIRTUAL( Keymap::VIRTUAL_MOUSE_BUTTON_3_TOGGLE )

};
static_assert( KEYMAP_BASE_END + ARRAYLENGTH( g_extendedKeymap ) <= 256, "g_baseKeymap and g_extendedKeymap must have total length no greater than 256" );




//============================================================================
//    Layers
//============================================================================


/*
	Default layer
	-------------

	left alt = select media layer
	left gui = left alt
	right alt = right gui
	right gui = right alt
*/
extern uint8_t const g_layer0[] __attribute__(( __progmem__ ));
uint8_t const g_layer0[] = {

	KEYMAP_NONE,

	KEYMAP_KEYBOARD_A,
	KEYMAP_KEYBOARD_B,
	KEYMAP_KEYBOARD_C,
	KEYMAP_KEYBOARD_D,
	KEYMAP_KEYBOARD_E,
	KEYMAP_KEYBOARD_F,
	KEYMAP_KEYBOARD_G,
	KEYMAP_KEYBOARD_H,
	KEYMAP_KEYBOARD_I,
	KEYMAP_KEYBOARD_J,
	KEYMAP_KEYBOARD_K,
	KEYMAP_KEYBOARD_L,
	KEYMAP_KEYBOARD_M,
	KEYMAP_KEYBOARD_N,
	KEYMAP_KEYBOARD_O,
	KEYMAP_KEYBOARD_P,
	KEYMAP_KEYBOARD_Q,
	KEYMAP_KEYBOARD_R,
	KEYMAP_KEYBOARD_S,
	KEYMAP_KEYBOARD_T,
	KEYMAP_KEYBOARD_U,
	KEYMAP_KEYBOARD_V,
	KEYMAP_KEYBOARD_W,
	KEYMAP_KEYBOARD_X,
	KEYMAP_KEYBOARD_Y,
	KEYMAP_KEYBOARD_Z,
	KEYMAP_KEYBOARD_1,
	KEYMAP_KEYBOARD_2,
	KEYMAP_KEYBOARD_3,
	KEYMAP_KEYBOARD_4,
	KEYMAP_KEYBOARD_5,
	KEYMAP_KEYBOARD_6,
	KEYMAP_KEYBOARD_7,
	KEYMAP_KEYBOARD_8,
	KEYMAP_KEYBOARD_9,
	KEYMAP_KEYBOARD_0,
	KEYMAP_KEYBOARD_ENTER,
	KEYMAP_KEYBOARD_ESCAPE,
	KEYMAP_KEYBOARD_BACKSPACE,
	KEYMAP_KEYBOARD_TAB,
	KEYMAP_KEYBOARD_SPACEBAR,
	KEYMAP_KEYBOARD_DASH,
	KEYMAP_KEYBOARD_EQUALS,
	KEYMAP_KEYBOARD_LEFT_BRACKET,
	KEYMAP_KEYBOARD_RIGHT_BRACKET,
	KEYMAP_KEYBOARD_BACKSLASH,
	KEYMAP_KEYBOARD_NON_US_HASH,
	KEYMAP_KEYBOARD_SEMICOLON,
	KEYMAP_KEYBOARD_QUOTE,
	KEYMAP_KEYBOARD_BACKQUOTE,
	KEYMAP_KEYBOARD_COMMA,
	KEYMAP_KEYBOARD_PERIOD,
	KEYMAP_KEYBOARD_SLASH,
	KEYMAP_KEYBOARD_CAPS_LOCK,
	KEYMAP_KEYBOARD_F1,
	KEYMAP_KEYBOARD_F2,
	KEYMAP_KEYBOARD_F3,
	KEYMAP_KEYBOARD_F4,
	KEYMAP_KEYBOARD_F5,
	KEYMAP_KEYBOARD_F6,
	KEYMAP_KEYBOARD_F7,
	KEYMAP_KEYBOARD_F8,
	KEYMAP_KEYBOARD_F9,
	KEYMAP_KEYBOARD_F10,
	KEYMAP_KEYBOARD_F11,
	KEYMAP_KEYBOARD_F12,
	KEYMAP_KEYBOARD_PRINT_SCREEN,
	KEYMAP_KEYBOARD_SCROLL_LOCK,
	KEYMAP_KEYBOARD_PAUSE,
	KEYMAP_KEYBOARD_INSERT,
	KEYMAP_KEYBOARD_HOME,
	KEYMAP_KEYBOARD_PAGE_UP,
	KEYMAP_KEYBOARD_DELETE,
	KEYMAP_KEYBOARD_END,
	KEYMAP_KEYBOARD_PAGE_DOWN,
	KEYMAP_KEYBOARD_RIGHT_ARROW,
	KEYMAP_KEYBOARD_LEFT_ARROW,
	KEYMAP_KEYBOARD_DOWN_ARROW,
	KEYMAP_KEYBOARD_UP_ARROW,
	KEYMAP_KEYBOARD_NUM_LOCK,
	KEYMAP_KEYBOARD_KEYPAD_SLASH,
	KEYMAP_KEYBOARD_KEYPAD_STAR,
	KEYMAP_KEYBOARD_KEYPAD_DASH,
	KEYMAP_KEYBOARD_KEYPAD_PLUS,
	KEYMAP_KEYBOARD_KEYPAD_ENTER,
	KEYMAP_KEYBOARD_KEYPAD_1,
	KEYMAP_KEYBOARD_KEYPAD_2,
	KEYMAP_KEYBOARD_KEYPAD_3,
	KEYMAP_KEYBOARD_KEYPAD_4,
	KEYMAP_KEYBOARD_KEYPAD_5,
	KEYMAP_KEYBOARD_KEYPAD_6,
	KEYMAP_KEYBOARD_KEYPAD_7,
	KEYMAP_KEYBOARD_KEYPAD_8,
	KEYMAP_KEYBOARD_KEYPAD_9,
	KEYMAP_KEYBOARD_KEYPAD_0,
	KEYMAP_KEYBOARD_KEYPAD_PERIOD,
	KEYMAP_KEYBOARD_NON_US_BACKSLASH,
	KEYMAP_KEYBOARD_APPLICATION,
	KEYMAP_KEYBOARD_POWER,
	KEYMAP_KEYBOARD_KEYPAD_EQUALS,
	KEYMAP_KEYBOARD_F13,
	KEYMAP_KEYBOARD_F14,
	KEYMAP_KEYBOARD_F15,

	KEYMAP_KEYBOARD_LEFT_CONTROL,
	KEYMAP_KEYBOARD_LEFT_SHIFT,
	KEYMAP_KEYBOARD_LEFT_GUI,    // KEYMAP_KEYBOARD_LEFT_ALT
	KEYMAP_KEYBOARD_LEFT_ALT,    // KEYMAP_KEYBOARD_LEFT_GUI
	KEYMAP_KEYBOARD_RIGHT_CONTROL,
	KEYMAP_KEYBOARD_RIGHT_SHIFT,
	KEYMAP_KEYBOARD_RIGHT_ALT,
	KEYMAP_VIRTUAL_LAYER_1_SELECT,

	KEYMAP_VIRTUAL_LOCKING_CAPS_LOCK,
	KEYMAP_VIRTUAL_LOCKING_NUM_LOCK,
	KEYMAP_VIRTUAL_LOCKING_SCROLL_LOCK

};
static_assert( ARRAYLENGTH( g_layer0 ) == KEYMAP_BASE_END, "g_layer0 must have same length as the base keymap" );


/*
	Media layer
	-----------

	space = lock Matias half-QWERTY layer

	num lock = clear
	print screen = F13
	scroll lock = F14
	pause = F15
	insert = help
	delete = backspace
	backspace = delete

	left arrow = home
	right arrow = end
	up arrow = page up
	down arrow = page down

	 ______ ______ ______ ______
	|      |      |      |      |
	|      | PnLt | PnRt | Btn3 |
	|______|______|______|______|
	|      |      |      |      |
	|  NW  |  N   |  NE  | ScUp |
	|______|______|______|______|
	|      |      |      |      |
	|   W  | Btn1 |  E   | ScDn |
	|______|______|______|______|
	|      |      |      |      |
	|  SW  |  S   |  SE  |      |
	|______|______|______| Btn2 |
	|             |      |      |
	|    Tgl1     | Tgl2 |      |
	|_____________|______|______|

	keypad 8 = mouse N
	keypad 9 = mouse NE
	keypad 6 = mouse E
	keypad 3 = mouse SE
	keypad 2 = mouse S
	keypad 1 = mouse SW
	keypad 4 = mouse W
	keypad 7 = mouse NW
	keypad minus = mouse wheel up
	keypad plus = mouse wheel down
	keypad equals = pan left
	keypad slash = pan right
	keypad 5 = left button
	keypad 0 = left button toggle
	keypad enter = right button
	keypad period = right button toggle
	keypad star = middle button

	 ______ ______ ______ ______     ______ ______ ______ ______     ______ ______ ______ ______
	|      |      |      |      |   |      |      |      |      |   |      |      |      |      |
	| Calc | Home | Mail | Web  |   | Stop | Prev | Paus | Next |   | Msc  | VlDn | VlUp | Mute |
	|______|______|______|______|   |______|______|______|______|   |______|______|______|______|

	F1 = calculator
	F2 = my computer
	F3 = email
	F4 = web browser
	F5 = stop
	F6 = previous track
	F7 = play/pause
	F8 = next track
	F9 = music player
	F10 = volume down
	F11 = volume up
	F12 = mute

	 ______ ______
	|      |      |
	| Mute | VlUp |
	|______|______|______
	|      |      |      |
	| Rwd  | VlDn |  FF  |
	|______|______|______|

	Q = mute
	W = volume up
	A = rewind
	S = volume down
	D = fast forward
*/
extern uint8_t const g_layer1[] __attribute__(( __progmem__ ));
uint8_t const g_layer1[] = {

	KEYMAP_NONE,

	KEYMAP_CONSUMER_REWIND,              // KEYMAP_KEYBOARD_A
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_B
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_C
	KEYMAP_CONSUMER_FAST_FORWARD,        // KEYMAP_KEYBOARD_D
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_E
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_F
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_G
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_H
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_I
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_J
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_K
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_L
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_M
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_N
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_O
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_P
	KEYMAP_CONSUMER_MUTE,                // KEYMAP_KEYBOARD_Q
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_R
	KEYMAP_CONSUMER_VOLUME_DECREMENT,    // KEYMAP_KEYBOARD_S
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_T
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_U
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_V
	KEYMAP_CONSUMER_VOLUME_INCREMENT,    // KEYMAP_KEYBOARD_W
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_X
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_Y
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_Z
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_1
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_2
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_3
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_4
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_5
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_6
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_7
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_8
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_9
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_0
	KEYMAP_KEYBOARD_ENTER,
	KEYMAP_KEYBOARD_ESCAPE,
	KEYMAP_KEYBOARD_DELETE,    // KEYMAP_KEYBOARD_BACKSPACE
	KEYMAP_KEYBOARD_TAB,
	KEYMAP_VIRTUAL_LAYER_2_LOCK,    // KEYMAP_KEYBOARD_SPACEBAR
	KEYMAP_KEYBOARD_DASH,
	KEYMAP_KEYBOARD_EQUALS,
	KEYMAP_KEYBOARD_LEFT_BRACKET,
	KEYMAP_KEYBOARD_RIGHT_BRACKET,
	KEYMAP_KEYBOARD_BACKSLASH,
	KEYMAP_KEYBOARD_NON_US_HASH,
	KEYMAP_KEYBOARD_SEMICOLON,
	KEYMAP_KEYBOARD_QUOTE,
	KEYMAP_KEYBOARD_BACKQUOTE,
	KEYMAP_KEYBOARD_COMMA,
	KEYMAP_KEYBOARD_PERIOD,
	KEYMAP_KEYBOARD_SLASH,
	KEYMAP_KEYBOARD_CAPS_LOCK,
	KEYMAP_CONSUMER_AL_CALCULATOR,                // KEYMAP_KEYBOARD_F1
	KEYMAP_CONSUMER_AL_LOCAL_MACHINE_BROWSER,     // KEYMAP_KEYBOARD_F2
	KEYMAP_CONSUMER_AL_EMAIL_READER,              // KEYMAP_KEYBOARD_F3
	KEYMAP_CONSUMER_AL_INTERNET_BROWSER,          // KEYMAP_KEYBOARD_F4
	KEYMAP_CONSUMER_STOP,                         // KEYMAP_KEYBOARD_F5
	KEYMAP_CONSUMER_SCAN_PREVIOUS_TRACK,          // KEYMAP_KEYBOARD_F6
	KEYMAP_CONSUMER_PLAY_PAUSE,                   // KEYMAP_KEYBOARD_F7
	KEYMAP_CONSUMER_SCAN_NEXT_TRACK,              // KEYMAP_KEYBOARD_F8
	KEYMAP_CONSUMER_AL_AUDIO_PLAYER,              // KEYMAP_KEYBOARD_F9
	KEYMAP_CONSUMER_VOLUME_DECREMENT,             // KEYMAP_KEYBOARD_F10
	KEYMAP_CONSUMER_VOLUME_INCREMENT,             // KEYMAP_KEYBOARD_F11
	KEYMAP_CONSUMER_MUTE,                         // KEYMAP_KEYBOARD_F12
	KEYMAP_KEYBOARD_F13,                          // KEYMAP_KEYBOARD_PRINT_SCREEN
	KEYMAP_KEYBOARD_F14,                          // KEYMAP_KEYBOARD_SCROLL_LOCK
	KEYMAP_KEYBOARD_F15,                          // KEYMAP_KEYBOARD_PAUSE
	KEYMAP_CONSUMER_AL_INTEGRATED_HELP_CENTER,    // KEYMAP_KEYBOARD_INSERT
	KEYMAP_KEYBOARD_HOME,
	KEYMAP_KEYBOARD_PAGE_UP,
	KEYMAP_KEYBOARD_BACKSPACE,    // KEYMAP_KEYBOARD_DELETE
	KEYMAP_KEYBOARD_END,
	KEYMAP_KEYBOARD_PAGE_DOWN,
	KEYMAP_KEYBOARD_END,                     // KEYMAP_KEYBOARD_RIGHT_ARROW
	KEYMAP_KEYBOARD_HOME,                    // KEYMAP_KEYBOARD_LEFT_ARROW
	KEYMAP_KEYBOARD_PAGE_DOWN,               // KEYMAP_KEYBOARD_DOWN_ARROW
	KEYMAP_KEYBOARD_PAGE_UP,                 // KEYMAP_KEYBOARD_UP_ARROW
	KEYMAP_KEYBOARD_KEYPAD_CLEAR,            // KEYMAP_KEYBOARD_NUM_LOCK
	KEYMAP_CONSUMER_AC_PAN_RIGHT,            // KEYMAP_KEYBOARD_KEYPAD_SLASH
	KEYMAP_VIRTUAL_MOUSE_BUTTON_3_PRESS,     // KEYMAP_KEYBOARD_KEYPAD_STAR
	KEYMAP_VIRTUAL_MOUSE_WHEEL_UP,           // KEYMAP_KEYBOARD_KEYPAD_DASH
	KEYMAP_VIRTUAL_MOUSE_WHEEL_DOWN,         // KEYMAP_KEYBOARD_KEYPAD_PLUS
	KEYMAP_VIRTUAL_MOUSE_BUTTON_2_PRESS,     // KEYMAP_KEYBOARD_KEYPAD_ENTER
	KEYMAP_VIRTUAL_MOUSE_SW,                 // KEYMAP_KEYBOARD_KEYPAD_1
	KEYMAP_VIRTUAL_MOUSE_S,                  // KEYMAP_KEYBOARD_KEYPAD_2
	KEYMAP_VIRTUAL_MOUSE_SE,                 // KEYMAP_KEYBOARD_KEYPAD_3
	KEYMAP_VIRTUAL_MOUSE_W,                  // KEYMAP_KEYBOARD_KEYPAD_4
	KEYMAP_VIRTUAL_MOUSE_BUTTON_1_PRESS,     // KEYMAP_KEYBOARD_KEYPAD_5
	KEYMAP_VIRTUAL_MOUSE_E,                  // KEYMAP_KEYBOARD_KEYPAD_6
	KEYMAP_VIRTUAL_MOUSE_NW,                 // KEYMAP_KEYBOARD_KEYPAD_7
	KEYMAP_VIRTUAL_MOUSE_N,                  // KEYMAP_KEYBOARD_KEYPAD_8
	KEYMAP_VIRTUAL_MOUSE_NE,                 // KEYMAP_KEYBOARD_KEYPAD_9
	KEYMAP_VIRTUAL_MOUSE_BUTTON_1_TOGGLE,    // KEYMAP_KEYBOARD_KEYPAD_0
	KEYMAP_VIRTUAL_MOUSE_BUTTON_2_TOGGLE,    // KEYMAP_KEYBOARD_KEYPAD_PERIOD
	KEYMAP_KEYBOARD_NON_US_BACKSLASH,
	KEYMAP_KEYBOARD_APPLICATION,
	KEYMAP_KEYBOARD_POWER,
	KEYMAP_CONSUMER_AC_PAN_LEFT,    // KEYMAP_KEYBOARD_KEYPAD_EQUALS
	KEYMAP_KEYBOARD_F13,
	KEYMAP_KEYBOARD_F14,
	KEYMAP_KEYBOARD_F15,

	KEYMAP_KEYBOARD_LEFT_CONTROL,
	KEYMAP_KEYBOARD_LEFT_SHIFT,
	KEYMAP_KEYBOARD_LEFT_ALT,
	KEYMAP_KEYBOARD_LEFT_GUI,
	KEYMAP_KEYBOARD_RIGHT_CONTROL,
	KEYMAP_KEYBOARD_RIGHT_SHIFT,
	KEYMAP_KEYBOARD_RIGHT_ALT,
	KEYMAP_KEYBOARD_RIGHT_GUI,

	KEYMAP_VIRTUAL_LOCKING_CAPS_LOCK,
	KEYMAP_VIRTUAL_LOCKING_NUM_LOCK,
	KEYMAP_VIRTUAL_LOCKING_SCROLL_LOCK

};
static_assert( ARRAYLENGTH( g_layer1 ) == KEYMAP_BASE_END, "g_layer1 must have same length as the base keymap" );


/*
	Matias half-QWERTY base layer
	-----------------------------

	all modifiers are sticky

	space = select flipped layer

	left alt = select media layer
	left gui = left alt
	right alt = right gui
	right gui = right alt
*/
extern uint8_t const g_layer2[] __attribute__(( __progmem__ ));
uint8_t const g_layer2[] = {

	KEYMAP_NONE,

	KEYMAP_KEYBOARD_A,
	KEYMAP_KEYBOARD_B,
	KEYMAP_KEYBOARD_C,
	KEYMAP_KEYBOARD_D,
	KEYMAP_KEYBOARD_E,
	KEYMAP_KEYBOARD_F,
	KEYMAP_KEYBOARD_G,
	KEYMAP_KEYBOARD_H,
	KEYMAP_KEYBOARD_I,
	KEYMAP_KEYBOARD_J,
	KEYMAP_KEYBOARD_K,
	KEYMAP_KEYBOARD_L,
	KEYMAP_KEYBOARD_M,
	KEYMAP_KEYBOARD_N,
	KEYMAP_KEYBOARD_O,
	KEYMAP_KEYBOARD_P,
	KEYMAP_KEYBOARD_Q,
	KEYMAP_KEYBOARD_R,
	KEYMAP_KEYBOARD_S,
	KEYMAP_KEYBOARD_T,
	KEYMAP_KEYBOARD_U,
	KEYMAP_KEYBOARD_V,
	KEYMAP_KEYBOARD_W,
	KEYMAP_KEYBOARD_X,
	KEYMAP_KEYBOARD_Y,
	KEYMAP_KEYBOARD_Z,
	KEYMAP_KEYBOARD_1,
	KEYMAP_KEYBOARD_2,
	KEYMAP_KEYBOARD_3,
	KEYMAP_KEYBOARD_4,
	KEYMAP_KEYBOARD_5,
	KEYMAP_KEYBOARD_6,
	KEYMAP_KEYBOARD_7,
	KEYMAP_KEYBOARD_8,
	KEYMAP_KEYBOARD_9,
	KEYMAP_KEYBOARD_0,
	KEYMAP_KEYBOARD_ENTER,
	KEYMAP_KEYBOARD_ESCAPE,
	KEYMAP_KEYBOARD_BACKSPACE,
	KEYMAP_KEYBOARD_TAB,
	KEYMAP_VIRTUAL_LAYER_3_SELECT,    // KEYMAP_KEYBOARD_SPACEBAR
	KEYMAP_KEYBOARD_DASH,
	KEYMAP_KEYBOARD_EQUALS,
	KEYMAP_KEYBOARD_LEFT_BRACKET,
	KEYMAP_KEYBOARD_RIGHT_BRACKET,
	KEYMAP_KEYBOARD_BACKSLASH,
	KEYMAP_KEYBOARD_NON_US_HASH,
	KEYMAP_KEYBOARD_SEMICOLON,
	KEYMAP_KEYBOARD_QUOTE,
	KEYMAP_KEYBOARD_BACKQUOTE,
	KEYMAP_KEYBOARD_COMMA,
	KEYMAP_KEYBOARD_PERIOD,
	KEYMAP_KEYBOARD_SLASH,
	KEYMAP_KEYBOARD_CAPS_LOCK,
	KEYMAP_KEYBOARD_F1,
	KEYMAP_KEYBOARD_F2,
	KEYMAP_KEYBOARD_F3,
	KEYMAP_KEYBOARD_F4,
	KEYMAP_KEYBOARD_F5,
	KEYMAP_KEYBOARD_F6,
	KEYMAP_KEYBOARD_F7,
	KEYMAP_KEYBOARD_F8,
	KEYMAP_KEYBOARD_F9,
	KEYMAP_KEYBOARD_F10,
	KEYMAP_KEYBOARD_F11,
	KEYMAP_KEYBOARD_F12,
	KEYMAP_KEYBOARD_PRINT_SCREEN,
	KEYMAP_KEYBOARD_SCROLL_LOCK,
	KEYMAP_KEYBOARD_PAUSE,
	KEYMAP_KEYBOARD_INSERT,
	KEYMAP_KEYBOARD_HOME,
	KEYMAP_KEYBOARD_PAGE_UP,
	KEYMAP_KEYBOARD_DELETE,
	KEYMAP_KEYBOARD_END,
	KEYMAP_KEYBOARD_PAGE_DOWN,
	KEYMAP_KEYBOARD_RIGHT_ARROW,
	KEYMAP_KEYBOARD_LEFT_ARROW,
	KEYMAP_KEYBOARD_DOWN_ARROW,
	KEYMAP_KEYBOARD_UP_ARROW,
	KEYMAP_KEYBOARD_NUM_LOCK,
	KEYMAP_KEYBOARD_KEYPAD_SLASH,
	KEYMAP_KEYBOARD_KEYPAD_STAR,
	KEYMAP_KEYBOARD_KEYPAD_DASH,
	KEYMAP_KEYBOARD_KEYPAD_PLUS,
	KEYMAP_KEYBOARD_KEYPAD_ENTER,
	KEYMAP_KEYBOARD_KEYPAD_1,
	KEYMAP_KEYBOARD_KEYPAD_2,
	KEYMAP_KEYBOARD_KEYPAD_3,
	KEYMAP_KEYBOARD_KEYPAD_4,
	KEYMAP_KEYBOARD_KEYPAD_5,
	KEYMAP_KEYBOARD_KEYPAD_6,
	KEYMAP_KEYBOARD_KEYPAD_7,
	KEYMAP_KEYBOARD_KEYPAD_8,
	KEYMAP_KEYBOARD_KEYPAD_9,
	KEYMAP_KEYBOARD_KEYPAD_0,
	KEYMAP_KEYBOARD_KEYPAD_PERIOD,
	KEYMAP_KEYBOARD_NON_US_BACKSLASH,
	KEYMAP_KEYBOARD_APPLICATION,
	KEYMAP_KEYBOARD_POWER,
	KEYMAP_KEYBOARD_KEYPAD_EQUALS,
	KEYMAP_KEYBOARD_F13,
	KEYMAP_KEYBOARD_F14,
	KEYMAP_KEYBOARD_F15,

	KEYMAP_VIRTUAL_STICKY_LEFT_CONTROL,     // KEYMAP_KEYBOARD_LEFT_CONTROL,
	KEYMAP_VIRTUAL_STICKY_LEFT_SHIFT,       // KEYMAP_KEYBOARD_LEFT_SHIFT,
	KEYMAP_VIRTUAL_STICKY_LEFT_GUI,         // KEYMAP_KEYBOARD_LEFT_ALT
	KEYMAP_VIRTUAL_STICKY_LEFT_ALT,         // KEYMAP_KEYBOARD_LEFT_GUI
	KEYMAP_VIRTUAL_STICKY_RIGHT_CONTROL,    // KEYMAP_KEYBOARD_RIGHT_CONTROL,
	KEYMAP_VIRTUAL_STICKY_RIGHT_SHIFT,      // KEYMAP_KEYBOARD_RIGHT_SHIFT,
	KEYMAP_VIRTUAL_LAYER_4_SELECT,          // KEYMAP_KEYBOARD_RIGHT_ALT
	KEYMAP_VIRTUAL_STICKY_RIGHT_ALT,        // KEYMAP_KEYBOARD_RIGHT_GUI

	KEYMAP_VIRTUAL_LOCKING_CAPS_LOCK,
	KEYMAP_VIRTUAL_LOCKING_NUM_LOCK,
	KEYMAP_VIRTUAL_LOCKING_SCROLL_LOCK

};
static_assert( ARRAYLENGTH( g_layer2 ) == KEYMAP_BASE_END, "g_layer2 must have same length as the base keymap" );


/*
	Matias half-QWERTY flipped layer
	--------------------------------

	all modifiers are sticky
	keys are flipped (see http://half-qwerty.com/)

	left alt = select media layer
	left gui = left alt
	right alt = right gui
	right gui = right alt
*/
extern uint8_t const g_layer3[] __attribute__(( __progmem__ ));
uint8_t const g_layer3[] = {

	KEYMAP_NONE,

	KEYMAP_KEYBOARD_SEMICOLON,    // KEYMAP_KEYBOARD_A
	KEYMAP_KEYBOARD_N,            // KEYMAP_KEYBOARD_B
	KEYMAP_KEYBOARD_COMMA,        // KEYMAP_KEYBOARD_C
	KEYMAP_KEYBOARD_K,            // KEYMAP_KEYBOARD_D
	KEYMAP_KEYBOARD_I,            // KEYMAP_KEYBOARD_E
	KEYMAP_KEYBOARD_J,            // KEYMAP_KEYBOARD_F
	KEYMAP_KEYBOARD_H,            // KEYMAP_KEYBOARD_G
	KEYMAP_KEYBOARD_G,            // KEYMAP_KEYBOARD_H
	KEYMAP_KEYBOARD_E,            // KEYMAP_KEYBOARD_I
	KEYMAP_KEYBOARD_F,            // KEYMAP_KEYBOARD_J
	KEYMAP_KEYBOARD_D,            // KEYMAP_KEYBOARD_K
	KEYMAP_KEYBOARD_S,            // KEYMAP_KEYBOARD_L
	KEYMAP_KEYBOARD_V,            // KEYMAP_KEYBOARD_M
	KEYMAP_KEYBOARD_B,            // KEYMAP_KEYBOARD_N
	KEYMAP_KEYBOARD_W,            // KEYMAP_KEYBOARD_O
	KEYMAP_KEYBOARD_Q,            // KEYMAP_KEYBOARD_P
	KEYMAP_KEYBOARD_P,            // KEYMAP_KEYBOARD_Q
	KEYMAP_KEYBOARD_U,            // KEYMAP_KEYBOARD_R
	KEYMAP_KEYBOARD_L,            // KEYMAP_KEYBOARD_S
	KEYMAP_KEYBOARD_Y,            // KEYMAP_KEYBOARD_T
	KEYMAP_KEYBOARD_R,            // KEYMAP_KEYBOARD_U
	KEYMAP_KEYBOARD_M,            // KEYMAP_KEYBOARD_V
	KEYMAP_KEYBOARD_O,            // KEYMAP_KEYBOARD_W
	KEYMAP_KEYBOARD_PERIOD,       // KEYMAP_KEYBOARD_X
	KEYMAP_KEYBOARD_T,            // KEYMAP_KEYBOARD_Y
	KEYMAP_KEYBOARD_SLASH,        // KEYMAP_KEYBOARD_Z
	KEYMAP_KEYBOARD_0,            // KEYMAP_KEYBOARD_1
	KEYMAP_KEYBOARD_9,            // KEYMAP_KEYBOARD_2
	KEYMAP_KEYBOARD_8,            // KEYMAP_KEYBOARD_3
	KEYMAP_KEYBOARD_7,            // KEYMAP_KEYBOARD_4
	KEYMAP_KEYBOARD_6,            // KEYMAP_KEYBOARD_5
	KEYMAP_KEYBOARD_5,            // KEYMAP_KEYBOARD_6
	KEYMAP_KEYBOARD_4,            // KEYMAP_KEYBOARD_7
	KEYMAP_KEYBOARD_3,            // KEYMAP_KEYBOARD_8
	KEYMAP_KEYBOARD_2,            // KEYMAP_KEYBOARD_9
	KEYMAP_KEYBOARD_1,            // KEYMAP_KEYBOARD_0
	KEYMAP_KEYBOARD_ENTER,
	KEYMAP_KEYBOARD_ESCAPE,
	KEYMAP_KEYBOARD_BACKSPACE,
	KEYMAP_KEYBOARD_BACKSPACE,    // KEYMAP_KEYBOARD_TAB
	KEYMAP_KEYBOARD_SPACEBAR,
	KEYMAP_KEYBOARD_DASH,
	KEYMAP_KEYBOARD_EQUALS,
	KEYMAP_KEYBOARD_TAB,    // KEYMAP_KEYBOARD_LEFT_BRACKET
	KEYMAP_KEYBOARD_TAB,    // KEYMAP_KEYBOARD_RIGHT_BRACKET
	KEYMAP_KEYBOARD_TAB,    // KEYMAP_KEYBOARD_BACKSLASH
	KEYMAP_KEYBOARD_NON_US_HASH,
	KEYMAP_KEYBOARD_A,    // KEYMAP_KEYBOARD_SEMICOLON
	KEYMAP_KEYBOARD_QUOTE,
	KEYMAP_KEYBOARD_BACKQUOTE,
	KEYMAP_KEYBOARD_C,    // KEYMAP_KEYBOARD_COMMA
	KEYMAP_KEYBOARD_X,    // KEYMAP_KEYBOARD_PERIOD
	KEYMAP_KEYBOARD_Z,    // KEYMAP_KEYBOARD_SLASH
	KEYMAP_KEYBOARD_CAPS_LOCK,
	KEYMAP_KEYBOARD_F1,
	KEYMAP_KEYBOARD_F2,
	KEYMAP_KEYBOARD_F3,
	KEYMAP_KEYBOARD_F4,
	KEYMAP_KEYBOARD_F5,
	KEYMAP_KEYBOARD_F6,
	KEYMAP_KEYBOARD_F7,
	KEYMAP_KEYBOARD_F8,
	KEYMAP_KEYBOARD_F9,
	KEYMAP_KEYBOARD_F10,
	KEYMAP_KEYBOARD_F11,
	KEYMAP_KEYBOARD_F12,
	KEYMAP_KEYBOARD_PRINT_SCREEN,
	KEYMAP_KEYBOARD_SCROLL_LOCK,
	KEYMAP_KEYBOARD_PAUSE,
	KEYMAP_KEYBOARD_INSERT,
	KEYMAP_KEYBOARD_HOME,
	KEYMAP_KEYBOARD_PAGE_UP,
	KEYMAP_KEYBOARD_DELETE,
	KEYMAP_KEYBOARD_END,
	KEYMAP_KEYBOARD_PAGE_DOWN,
	KEYMAP_KEYBOARD_RIGHT_ARROW,
	KEYMAP_KEYBOARD_LEFT_ARROW,
	KEYMAP_KEYBOARD_DOWN_ARROW,
	KEYMAP_KEYBOARD_UP_ARROW,
	KEYMAP_KEYBOARD_NUM_LOCK,
	KEYMAP_KEYBOARD_KEYPAD_SLASH,
	KEYMAP_KEYBOARD_KEYPAD_STAR,
	KEYMAP_KEYBOARD_KEYPAD_DASH,
	KEYMAP_KEYBOARD_KEYPAD_PLUS,
	KEYMAP_KEYBOARD_KEYPAD_ENTER,
	KEYMAP_KEYBOARD_KEYPAD_1,
	KEYMAP_KEYBOARD_KEYPAD_2,
	KEYMAP_KEYBOARD_KEYPAD_3,
	KEYMAP_KEYBOARD_KEYPAD_4,
	KEYMAP_KEYBOARD_KEYPAD_5,
	KEYMAP_KEYBOARD_KEYPAD_6,
	KEYMAP_KEYBOARD_KEYPAD_7,
	KEYMAP_KEYBOARD_KEYPAD_8,
	KEYMAP_KEYBOARD_KEYPAD_9,
	KEYMAP_KEYBOARD_KEYPAD_0,
	KEYMAP_KEYBOARD_KEYPAD_PERIOD,
	KEYMAP_KEYBOARD_NON_US_BACKSLASH,
	KEYMAP_KEYBOARD_APPLICATION,
	KEYMAP_KEYBOARD_POWER,
	KEYMAP_KEYBOARD_KEYPAD_EQUALS,
	KEYMAP_KEYBOARD_F13,
	KEYMAP_KEYBOARD_F14,
	KEYMAP_KEYBOARD_F15,

	KEYMAP_VIRTUAL_STICKY_LEFT_CONTROL,     // KEYMAP_KEYBOARD_LEFT_CONTROL,
	KEYMAP_KEYBOARD_ENTER,                  // KEYMAP_KEYBOARD_LEFT_SHIFT
	KEYMAP_VIRTUAL_STICKY_LEFT_GUI,         // KEYMAP_KEYBOARD_LEFT_ALT
	KEYMAP_VIRTUAL_STICKY_LEFT_ALT,         // KEYMAP_KEYBOARD_LEFT_GUI
	KEYMAP_VIRTUAL_STICKY_RIGHT_CONTROL,    // KEYMAP_KEYBOARD_RIGHT_CONTROL,
	KEYMAP_VIRTUAL_STICKY_RIGHT_SHIFT,      // KEYMAP_KEYBOARD_RIGHT_SHIFT,
	KEYMAP_VIRTUAL_STICKY_RIGHT_GUI,        // KEYMAP_KEYBOARD_RIGHT_ALT
	KEYMAP_VIRTUAL_STICKY_RIGHT_ALT,        // KEYMAP_KEYBOARD_RIGHT_GUI

	KEYMAP_VIRTUAL_LOCKING_CAPS_LOCK,
	KEYMAP_VIRTUAL_LOCKING_NUM_LOCK,
	KEYMAP_VIRTUAL_LOCKING_SCROLL_LOCK

};
static_assert( ARRAYLENGTH( g_layer3 ) == KEYMAP_BASE_END, "g_layer3 must have same length as the base keymap" );


/*
	Matias half-QWERTY media layer
	------------------------------

	mostly the same as the default media layer
	all modifiers are sticky

	space = lock default layer
*/
extern uint8_t const g_layer4[] __attribute__(( __progmem__ ));
uint8_t const g_layer4[] = {

	KEYMAP_NONE,

	KEYMAP_CONSUMER_REWIND,              // KEYMAP_KEYBOARD_A
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_B
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_C
	KEYMAP_CONSUMER_FAST_FORWARD,        // KEYMAP_KEYBOARD_D
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_E
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_F
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_G
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_H
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_I
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_J
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_K
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_L
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_M
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_N
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_O
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_P
	KEYMAP_CONSUMER_MUTE,                // KEYMAP_KEYBOARD_Q
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_R
	KEYMAP_CONSUMER_VOLUME_DECREMENT,    // KEYMAP_KEYBOARD_S
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_T
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_U
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_V
	KEYMAP_CONSUMER_VOLUME_INCREMENT,    // KEYMAP_KEYBOARD_W
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_X
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_Y
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_Z
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_1
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_2
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_3
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_4
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_5
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_6
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_7
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_8
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_9
	KEYMAP_NONE,                         // KEYMAP_KEYBOARD_0
	KEYMAP_KEYBOARD_ENTER,
	KEYMAP_KEYBOARD_ESCAPE,
	KEYMAP_KEYBOARD_DELETE,    // KEYMAP_KEYBOARD_BACKSPACE
	KEYMAP_KEYBOARD_TAB,
	KEYMAP_VIRTUAL_LAYER_0_LOCK,    // KEYMAP_KEYBOARD_SPACEBAR
	KEYMAP_KEYBOARD_DASH,
	KEYMAP_KEYBOARD_EQUALS,
	KEYMAP_KEYBOARD_LEFT_BRACKET,
	KEYMAP_KEYBOARD_RIGHT_BRACKET,
	KEYMAP_KEYBOARD_BACKSLASH,
	KEYMAP_KEYBOARD_NON_US_HASH,
	KEYMAP_KEYBOARD_SEMICOLON,
	KEYMAP_KEYBOARD_QUOTE,
	KEYMAP_KEYBOARD_BACKQUOTE,
	KEYMAP_KEYBOARD_COMMA,
	KEYMAP_KEYBOARD_PERIOD,
	KEYMAP_KEYBOARD_SLASH,
	KEYMAP_KEYBOARD_CAPS_LOCK,
	KEYMAP_CONSUMER_AL_CALCULATOR,                // KEYMAP_KEYBOARD_F1
	KEYMAP_CONSUMER_AL_LOCAL_MACHINE_BROWSER,     // KEYMAP_KEYBOARD_F2
	KEYMAP_CONSUMER_AL_EMAIL_READER,              // KEYMAP_KEYBOARD_F3
	KEYMAP_CONSUMER_AL_INTERNET_BROWSER,          // KEYMAP_KEYBOARD_F4
	KEYMAP_CONSUMER_STOP,                         // KEYMAP_KEYBOARD_F5
	KEYMAP_CONSUMER_SCAN_PREVIOUS_TRACK,          // KEYMAP_KEYBOARD_F6
	KEYMAP_CONSUMER_PLAY_PAUSE,                   // KEYMAP_KEYBOARD_F7
	KEYMAP_CONSUMER_SCAN_NEXT_TRACK,              // KEYMAP_KEYBOARD_F8
	KEYMAP_CONSUMER_AL_AUDIO_PLAYER,              // KEYMAP_KEYBOARD_F9
	KEYMAP_CONSUMER_VOLUME_DECREMENT,             // KEYMAP_KEYBOARD_F10
	KEYMAP_CONSUMER_VOLUME_INCREMENT,             // KEYMAP_KEYBOARD_F11
	KEYMAP_CONSUMER_MUTE,                         // KEYMAP_KEYBOARD_F12
	KEYMAP_KEYBOARD_F13,                          // KEYMAP_KEYBOARD_PRINT_SCREEN
	KEYMAP_KEYBOARD_F14,                          // KEYMAP_KEYBOARD_SCROLL_LOCK
	KEYMAP_KEYBOARD_F15,                          // KEYMAP_KEYBOARD_PAUSE
	KEYMAP_CONSUMER_AL_INTEGRATED_HELP_CENTER,    // KEYMAP_KEYBOARD_INSERT
	KEYMAP_KEYBOARD_HOME,
	KEYMAP_KEYBOARD_PAGE_UP,
	KEYMAP_KEYBOARD_BACKSPACE,    // KEYMAP_KEYBOARD_DELETE
	KEYMAP_KEYBOARD_END,
	KEYMAP_KEYBOARD_PAGE_DOWN,
	KEYMAP_KEYBOARD_END,                     // KEYMAP_KEYBOARD_RIGHT_ARROW
	KEYMAP_KEYBOARD_HOME,                    // KEYMAP_KEYBOARD_LEFT_ARROW
	KEYMAP_KEYBOARD_PAGE_DOWN,               // KEYMAP_KEYBOARD_DOWN_ARROW
	KEYMAP_KEYBOARD_PAGE_UP,                 // KEYMAP_KEYBOARD_UP_ARROW
	KEYMAP_KEYBOARD_KEYPAD_CLEAR,            // KEYMAP_KEYBOARD_NUM_LOCK
	KEYMAP_CONSUMER_AC_PAN_RIGHT,            // KEYMAP_KEYBOARD_KEYPAD_SLASH
	KEYMAP_VIRTUAL_MOUSE_BUTTON_3_PRESS,     // KEYMAP_KEYBOARD_KEYPAD_STAR
	KEYMAP_VIRTUAL_MOUSE_WHEEL_UP,           // KEYMAP_KEYBOARD_KEYPAD_DASH
	KEYMAP_VIRTUAL_MOUSE_WHEEL_DOWN,         // KEYMAP_KEYBOARD_KEYPAD_PLUS
	KEYMAP_VIRTUAL_MOUSE_BUTTON_2_PRESS,     // KEYMAP_KEYBOARD_KEYPAD_ENTER
	KEYMAP_VIRTUAL_MOUSE_SW,                 // KEYMAP_KEYBOARD_KEYPAD_1
	KEYMAP_VIRTUAL_MOUSE_S,                  // KEYMAP_KEYBOARD_KEYPAD_2
	KEYMAP_VIRTUAL_MOUSE_SE,                 // KEYMAP_KEYBOARD_KEYPAD_3
	KEYMAP_VIRTUAL_MOUSE_W,                  // KEYMAP_KEYBOARD_KEYPAD_4
	KEYMAP_VIRTUAL_MOUSE_BUTTON_1_PRESS,     // KEYMAP_KEYBOARD_KEYPAD_5
	KEYMAP_VIRTUAL_MOUSE_E,                  // KEYMAP_KEYBOARD_KEYPAD_6
	KEYMAP_VIRTUAL_MOUSE_NW,                 // KEYMAP_KEYBOARD_KEYPAD_7
	KEYMAP_VIRTUAL_MOUSE_N,                  // KEYMAP_KEYBOARD_KEYPAD_8
	KEYMAP_VIRTUAL_MOUSE_NE,                 // KEYMAP_KEYBOARD_KEYPAD_9
	KEYMAP_VIRTUAL_MOUSE_BUTTON_1_TOGGLE,    // KEYMAP_KEYBOARD_KEYPAD_0
	KEYMAP_VIRTUAL_MOUSE_BUTTON_2_TOGGLE,    // KEYMAP_KEYBOARD_KEYPAD_PERIOD
	KEYMAP_KEYBOARD_NON_US_BACKSLASH,
	KEYMAP_KEYBOARD_APPLICATION,
	KEYMAP_KEYBOARD_POWER,
	KEYMAP_CONSUMER_AC_PAN_LEFT,    // KEYMAP_KEYBOARD_KEYPAD_EQUALS
	KEYMAP_KEYBOARD_F13,
	KEYMAP_KEYBOARD_F14,
	KEYMAP_KEYBOARD_F15,

	KEYMAP_VIRTUAL_STICKY_LEFT_CONTROL,     // KEYMAP_KEYBOARD_LEFT_CONTROL
	KEYMAP_VIRTUAL_STICKY_LEFT_SHIFT,       // KEYMAP_KEYBOARD_LEFT_SHIFT
	KEYMAP_VIRTUAL_STICKY_LEFT_ALT,         // KEYMAP_KEYBOARD_LEFT_ALT
	KEYMAP_VIRTUAL_STICKY_LEFT_GUI,         // KEYMAP_KEYBOARD_LEFT_GUI
	KEYMAP_VIRTUAL_STICKY_RIGHT_CONTROL,    // KEYMAP_KEYBOARD_RIGHT_CONTROL
	KEYMAP_VIRTUAL_STICKY_RIGHT_SHIFT,      // KEYMAP_KEYBOARD_RIGHT_SHIFT
	KEYMAP_VIRTUAL_STICKY_RIGHT_ALT,        // KEYMAP_KEYBOARD_RIGHT_ALT
	KEYMAP_VIRTUAL_STICKY_RIGHT_GUI,        // KEYMAP_KEYBOARD_RIGHT_GUI

	KEYMAP_VIRTUAL_LOCKING_CAPS_LOCK,
	KEYMAP_VIRTUAL_LOCKING_NUM_LOCK,
	KEYMAP_VIRTUAL_LOCKING_SCROLL_LOCK

};
static_assert( ARRAYLENGTH( g_layer4 ) == KEYMAP_BASE_END, "g_layer4 must have same length as the base keymap" );


extern uint8_t const* const g_layers[] __attribute__(( __progmem__ ));
uint8_t const* const g_layers[] = {
	g_layer0,
	g_layer1,
	g_layer2,
	g_layer3,
	g_layer4,
	NULL
};




//============================================================================
//    main function
//============================================================================


int main() {

	// run at 16MHz
	CLKPR = ( 1 << CLKPCE );
	CLKPR = 0;

	// enable the LEDs, and light them up
	DDRB  = 0x07;
	PORTB = 0x07;

	USB::Device* pDevice = USB::Device::Instance();

	sei();


	Buttons buttons( "b6b7d0d1d2d3d4d5b4d7", false );
	buttons.SetDebouncing( 3 );

	KeyboardMatrix matrix( "c0c1c2c3c4c5c6c7", "e7e6e0e1", false );
	matrix.SetAntiGhosting( true );
	matrix.SetDebouncing( 3 );

	ADB adb( "b5" );
	adb.SetLEDs( 7 );


	// set used switches in keyboard matrix
	{	unsigned int index = 0;
		for ( unsigned int ii = 0; ii < ROWS; ++ii ) {

			for ( unsigned int jj = 0; jj < COLUMNS; ++jj ) {

				if ( pgm_read_word( g_matrixKeymap + index ) != KEYMAP_NONE )
					matrix.SetSwitch( ii, jj, true );

				++index;
			}
		}
	}


	uint8_t const manufacturerString  = pDevice->RegisterStringProgmem( g_manufacturerString, ( ARRAYLENGTH( g_manufacturerString ) - 1 ) );
	uint8_t const productString       = pDevice->RegisterStringProgmem( g_productString,      ( ARRAYLENGTH( g_productString      ) - 1 ) );
	uint8_t const serialString        = 0;
	uint8_t const configurationString = 0;

	uint8_t const mouseString             = pDevice->RegisterStringProgmem( g_mouseString,             ( ARRAYLENGTH( g_mouseString             ) - 1 ) );
	uint8_t const keyboardString          = pDevice->RegisterStringProgmem( g_keyboardString,          ( ARRAYLENGTH( g_keyboardString          ) - 1 ) );
	uint8_t const keyboardExtensionString = pDevice->RegisterStringProgmem( g_keyboardExtensionString, ( ARRAYLENGTH( g_keyboardExtensionString ) - 1 ) );

	USB::HID::Mouse             mouse(             ( mouseString             == 0xff ) ? 0 : mouseString             );
	USB::HID::Keyboard          keyboard(          ( keyboardString          == 0xff ) ? 0 : keyboardString          );
	USB::HID::KeyboardExtension keyboardExtension( ( keyboardExtensionString == 0xff ) ? 0 : keyboardExtensionString );

	Keymap keymap(
		&mouse,
		&keyboard,
		&keyboardExtension,
		0.1, 2, 100, 2000,
		0,   4,   5,  100,
		g_extendedKeymap
	);
	for ( unsigned int ii = 0; ; ++ii ) {

		static_assert( sizeof( g_layers[ 0 ] ) == 2, "pointer size expected to be 2 bytes" );
		uint8_t const* const layer = reinterpret_cast< uint8_t const* >( pgm_read_word( g_layers + ii ) );
		if ( layer == NULL )
			break;
		keymap.SetLayer( ii, layer );
	}

	pDevice->Start(
		g_vendorID,
		g_productID,
		g_releaseNumber,
		( ( manufacturerString  == 0xff ) ? 0 : manufacturerString  ),
		( ( productString       == 0xff ) ? 0 : productString       ),
		( ( serialString        == 0xff ) ? 0 : serialString        ),
		( ( configurationString == 0xff ) ? 0 : configurationString )
	);
	while ( ! pDevice->GetConfiguration() );


	uint16_t pressed[    16 ];
	uint16_t oldPressed[ 16 ];
	memset( pressed,    0, sizeof( pressed    ) );
	memset( oldPressed, 0, sizeof( oldPressed ) );

	for ( ; ; ) {

		bool const numLock    = keyboard.GetLED( USB::HID::LED_NUM_LOCK    );
		bool const capsLock   = keyboard.GetLED( USB::HID::LED_CAPS_LOCK   );
		bool const scrollLock = keyboard.GetLED( USB::HID::LED_SCROLL_LOCK );
		PORTB = ( ( PORTB & ~0x07 ) | (
			( numLock    ? 1 : 0 ) |
			( capsLock   ? 2 : 0 ) |
			( scrollLock ? 4 : 0 )
		) );
		adb.SetLEDs(
			( numLock    ? ADB::LED_NUM_LOCK    : 0 ) |
			( capsLock   ? ADB::LED_CAPS_LOCK   : 0 ) |
			( scrollLock ? ADB::LED_SCROLL_LOCK : 0 )
		);

		bool const buttonsChanged = buttons.Update();
		bool const matrixChanged  = matrix.Update();
		bool const adbChanged     = adb.UpdateKeyboard();
		if ( buttonsChanged || matrixChanged || adbChanged ) {

			memset( pressed, 0, sizeof( pressed ) );

			// get keypresses from buttons list
			for ( unsigned int ii = 0; ii < BUTTONS; ++ii ) {

				if ( buttons.GetPressed( ii ) ) {

					uint8_t const code = pgm_read_byte( g_buttonsKeymap + ii );
					pressed[ code >> 4 ] |= ( 1 << ( code & 15 ) );
				}
			}

			// get keypresses from keyboard matrix
			unsigned int index = 0;
			for ( unsigned int ii = 0; ii < ROWS; ++ii ) {

				for ( unsigned int jj = 0; jj < COLUMNS; ++jj ) {

					if ( matrix.GetPressed( ii, jj ) ) {

						uint8_t const code = pgm_read_byte( g_matrixKeymap + index );
						pressed[ code >> 4 ] |= ( 1 << ( code & 15 ) );
					}

					++index;
				}
			}

			// get keypresses from ADB
			for ( unsigned int ii = 0; ii < ARRAYLENGTH( g_adbKeymap ); ++ii ) {

				if ( adb.GetPressed( ii ) ) {

					uint8_t const code = pgm_read_byte( g_adbKeymap + ii );
					pressed[ code >> 4 ] |= ( 1 << ( code & 15 ) );
				}
			}

			// tell the keymap class about the new keypresses
			for ( unsigned int ii = 0; ii < ARRAYLENGTH( pressed ); ++ii ) {

				if ( pressed[ ii ] != oldPressed[ ii ] ) {

					uint8_t code = ii * 16;
					for ( unsigned int jj = 0; jj < 16; ++jj ) {

						uint16_t const mask = ( 1 << jj );
						if ( ( pressed[ ii ] & mask ) != ( oldPressed[ ii ] & mask ) ) {

							if ( pressed[ ii ] & mask )
								keymap.Press( code );
							else
								keymap.Release( code );
						}

						++code;
					}
				}
			}

			memcpy( oldPressed, pressed, sizeof( oldPressed ) );
		}
		keymap.Update();
	}

	return 0;
}
